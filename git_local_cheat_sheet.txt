This file contains important git commands and can be revisited if necessary

SETTING user.name / email
git config --global user.email "sacha.van.weeren@gmail.com"
git config --global user.name "dikkiedik"

git config --list : lists all the user details 
git config user.name : returns the user name that was set

CREATE a local repository
git init : create a local repository
git clone : to get a copy of a repository that already exists

ADD FILE - to be tracked
git add all_checks.py : adds a file to be tracked by git or adds it to stagin area
git add * adds all files to the staging area


LIST of tracked files:
git ls-tree -r master --name-only

.GITIGNORE file
A file that can be used to define files that will be ignored. These files need to be commited in order to be tracked

HEAD:
Git use the HEAD alias to represent the currently checked-out snapshot of your project.

STATUS:
git status	: Shows status of the your project. 

DIFFERENCES:
git diff	  : Shows the difference in the files that have not been committed compared to last commit
git diff --staged : Shows the difference to staged but not committed files

git add -p	: show and approve each change before staging it

HISTORY of commits:
git log		: Shows history of all commits
git log -2	: Shows last 2 commits
git log -2 -p 	: Shows the details/differences of the last 2 commits
git log --stat 	: Show high level changes, e.g. number of instertion, number of files changes 

git show hashingkey : Show the changes for the commit with this hasing key 

SKIPPING the Staging Area:
git commit -a 	: adds all files that are tracked to the staging area
git commit -a -m "Commit text"

MOVING/DELITING FILES:
git mv filename		: similar to linux mv command
git rm oldname newname	: similar to linux rm command 

UNDOING CHANGES - before commiting
git checkout all_check.py : restore the last available version of the file in the repository
git checkout -p all_check.py : asks if changes need to be saved or not

UNDOING CHANGES - after staging
git reset all_checks.py	: removes files from the staging area and makes them untracked
git reset -p : asks which changes should be reset from the staging area

AMENDING COMMITS - overwrite the previous commit
if your commit is incomplete you can add a file and then type:
git commit --amend : amends the latest commit
the same commit can also be used to only change the message of the latest commit


ROLLBACKS
If you lates commit wasn't tested and introduces bugs you can rollback to an earlier commit
git revert : contains an inverse commit to discard unwanted changes
git revert HEAD : reverst to the previous commit




